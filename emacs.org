#+title: Initialize emacs
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Package management

#+begin_src emacs-lisp
  (setq package-archives
	'(("melpa" . "http://melpa.org/packages/")
	  ("melpa-stable" . "http://stable.melpa.org/packages/")
	  ("gnu" . "http://elpa.gnu.org/packages/")
	  ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t) ;:ensure t for all use-packages
#+end_src

* Basic emacs UI config

** config

#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path "/home/andy/.emacs.d/elpa")
  (setq custom-file (expand-file-name "~/.emacs.d/custom.el"))
  (load custom-file)

  (scroll-bar-mode -1)

  (set-frame-parameter nil 'fullscreen 'maximized)
#+end_src

** Theme

#+begin_src emacs-lisp
  (use-package abyss-theme
    :ensure t)
#+end_src

#+begin_src emacs-lisp
  (use-package spacemacs-theme
    :if (not window-system)
    :defer t
    :ensure t)
#+end_src

** gui vs terminal
Use theme according environment

#+begin_src emacs-lisp
  (if (display-graphic-p)
    (load-theme 'abyss)
  (load-theme 'spacemacs-dark))
#+end_src

** y or n

#+begin_src emacs-lisp
  ;; Ask user a "y or n" question.
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

* Python

** elpy

#+begin_src emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (setq py-python-command "python3")
    (setq elpy-test-runner 'elpy-test-pytest-runner)
	  ;;elpy-test-pytest-runner-command '("python" "-m" "pytest"))
    (setq python-shell-interpreter "ipython"
	  python-shell-interpreter-args "-i --simple-prompt")
    (setq elpy-eldoc-show-current-function nil)
  ;  (setq elpy-shell-starting-directory "current-directory")
    (with-eval-after-load 'python
      (elpy-enable)))
#+end_src

** ein notebooks (jupyter)

#+begin_src emacs-lisp
  (use-package ein
    :ensure t
    :commands (ein:notebooklist-open))
#+end_src

* SQL

** config

#+begin_src emacs-lisp
  (setq sql-indent-offset 2)
  ;;Load database connection settings
  (eval-after-load "sql"
    '(load-if-exists "~/.sql.el"))
#+end_src

* web

** web-mode

#+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (setq tab-width 2)
    (setq web-mode-enable-current-column-highlight 1)
    (setq web-mode-enable-current-element-highlight 1)
    :mode ("\\.html?\\'"
	   "\\.css\\'"
	   "\\.phtml\\'"
	   "\\.php\\'"
	   "\\.inc\\'"
	   "\\.tpl\\'"
	   "\\.jsp\\'"
	   "\\.as[cp]x\\'"
	   "\\.erb\\'"
	   "\\.mustache\\'"
	   "\\.djhtml\\'"
	   "\\.jsx\\'"
	   "\\.tsx\\'"))

  (defun my-web-mode-hook ()
  "Hooks for Web mode."
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (set (make-local-variable 'company-backends) '(company-css company-web-html company-yasnippet company-files))
  )

(add-hook 'web-mode-hook 'my-web-mode-hook)
#+end_src

** emmet

#+begin_src emacs-lisp
  (use-package emmet-mode
    :ensure t
    :hook
    (web-mode)
    :init
    (add-hook 'web-mode-before-auto-complete-hooks
      '(lambda ()
       (let ((web-mode-cur-language
	      (web-mode-language-at-pos)))
		 (if (string= web-mode-cur-language "php")
	     (yas-activate-extra-mode 'php-mode)
	   (yas-deactivate-extra-mode 'php-mode))
		 (if (string= web-mode-cur-language "css")
	     (setq emmet-use-css-transform t)
	   (setq emmet-use-css-transform nil)))))
    )
#+end_src

** javascript

#+begin_src emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode
    ("\\.js\\'" . js2-mode)
    :config
    (setq js2-indent-level 2
	  js2-strict-missing-semi-warning nil)
    :custom
    (js2r-prefer-let-over-var t)
    (js-indent-align-list-continuation t))
#+end_src

** company-web

#+begin_src emacs-lisp
  (use-package company-web
    :ensure t
    :defer t)
#+end_src

* Company

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    :custom
    (company-minimum-prefix-length 2))
#+end_src

* Yasnippet

#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :defer t
    :hook
    (web-mode . yas-minor-mode))
#+end_src

* hideshow

#+begin_src emacs-lisp
  (use-package hideshow
    :ensure t
    :hook
    (python-mode . hs-minor-mode)
    :config
    (setq hs-isearch-open 'code)
    )
#+end_src

* Magit

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x C-g s" . magit-status))
    :config
    (setq magit-last-seen-setup-instructions "1.4.0")
    (setq magit-stage-all-confirm nil)
    (setq magit-unstage-all-confirm nil)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain))
#+end_src

* org-mode
see [[https://orgmode.org/][org-mode website]]

** basic config

#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :config
    (setq org-hide-emphasis-markers t)
    (setq org-ellipsis " ▾")
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-image-actual-width 700)
    (setq org-refile-targets
	  '(("archive.org" :maxlevel . 1)))
    ;; Save org buffers after refiling
    (advice-add 'org-refile :after 'org-save-all-org-buffers)
    (setq org-archive-location "%s_archive::")
    :bind
    ("C-c a" . 'org-agenda)
    ;;:hook
    ;;(org-mode 'turn-on-auto-fill)
    )
;;control size of headings
  (dolist (face '((org-level-1 . 1.2)
		  (org-level-2 . 1.15)
		  (org-level-3 . 1.05)
		  (org-level-4 . 1.0)
		  (org-level-5 . 1.0)))
    (set-face-attribute (car face) nil :weight 'regular :height (cdr face)))
  (add-hook 'org-mode-hook 'auto-fill-mode)
  #+end_src

** org-tempo
Is required for the template shortcuts

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

** org-babel config

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src

** org-bullets

#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** auto-tangle
Converts this emacs.org file into the init.el file whenever this file is saved

#+begin_src emacs-lisp
  (defun a/org-babel-tangle-config()
    (when (string-equal (buffer-file-name)
			(expand-file-name "~/.emacs.d/emacs.org"))
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'a/org-babel-tangle-config)))
#+end_src

** control focus
Functions to change the focus between work, private and both for the agenda.
Default focus on all

#+begin_src emacs-lisp
  (defun org-focus-private() "Set focus on private things."
	 (interactive)
	 (setq org-agenda-files '("~/Orgy/me.org")))
  (defun org-focus-work() "Set focus on work things."
	 (interactive)
	 (setq org-agenda-files '("~/Orgy/limo.org")))
  (defun org-focus-all() "Set focus on all things."
	 (interactive)
	 (setq org-agenda-files '("~/Orgy/limo.org"
				  "~/Orgy/me.org")))

  (org-focus-all)
#+end_src

* org-roam
see [[https://www.orgroam.com/][web]], [[https://github.com/org-roam/org-roam][github]]

#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-completion-everywhere t)
    (org-roam-directory "~/Orgy/Notes")
    (org-roam-capture-templates
     '(("d" "default" plain
	"\n\n- tags :: %?"
	:if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	:unnarrowed t)
       ("p" "programmer" plain
	"\n* Personal data\n- Name: ${title}\n- Email: %^{Email}\n- Work: %^{Work}\n- Country: %^{Country}\n- Topics of interest\n> %?\n* Social\n\n* Publications\n"
	:if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	:unnarrowed t)
       ("r" "recipe" plain
	"\n\n- tags :: %?\n- links :: \n- video :: \n\n* Ingredients\n\n* Preparation\n\n* Ideas\n"
	:if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	:unnarowed t)
       ("s" "software" plain
	"\n\n- tags :: %?\n- sourcecode :: \n- docs :: \n- website :: \n- blog :: \n- video :: \n- hacker news :: \n\n* Description\n\n* Usage\n"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
      :unnarowed t)
	))
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n i" . org-roam-node-insert)
	   ("C-c n g" . org-roam-graph)
	   :map org-mode-map
	   ("C-M-i" . completion-at-point))
    :config
    (org-roam-setup))
#+end_src

* Language Server 

** lsp-mode

#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (dolist (dir '(
		   "[/\\\\]\\venv$"
		   "[/\\\\]\\.git$"
		   "[/\\\\]__pycache__$"
		   ))
      (push dir lsp-file-watch-ignored))
    (lsp-enable-which-key-integration t))
#+end_src

** lsp-pyright
A python language server

#+begin_src emacs-lisp
  (use-package lsp-pyright
    :ensure t
    :hook (python-mode . (lambda ()
			   (require 'lsp-pyright)
			   (lsp-deferred))))
#+end_src

** lsp-ui

#+begin_src emacs-lisp
  (use-package lsp-ui
    :hook
    (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))
#+end_src

** lsp-treemacs

#+begin_src emacs-lisp
  (use-package lsp-treemacs
    :after lsp)
#+end_src

* rainbow-delimiters
see [[https://github.com/Fanael/rainbow-delimiters][github]]

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* ivy

** ivy-mode

#+begin_src emacs-lisp
  (use-package ivy
    ;;:diminish
    :init (ivy-mode)
    :bind
    ("C-s" . swiper)
    :config
    (setq ivy-wrap t)
    (setq ivy-use-virtual-buffers t)
    (setf (alist-get 'swiper ivy-height-alist) 10)
    (setf (alist-get 'ivy-switch-buffer ivy-height-alist) 7))
#+end_src

** ivy-rich

#+begin_src emacs-lisp
  (use-package ivy-rich
    :init (ivy-rich-mode))
#+end_src

* counsel

#+begin_src emacs-lisp
  (use-package counsel
    :config (counsel-mode)
    :bind
    (:map minibuffer-local-map
	  ("C-r" . 'counsel-minibuffer-history)))
#+end_src

* helpful

#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

* which-key
see [[https://github.com/justbur/emacs-which-key][github]]

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-setup-side-window-right-bottom)
    :config
    (which-key-mode))
#+end_src

* auto-dim-other-buffer

#+begin_src emacs-lisp
  (use-package auto-dim-other-buffers
    :ensure t
    :if window-system ;(display-graphic-p)
    :config
    (auto-dim-other-buffers-mode t))
#+end_src

* multi term

** term-mode

#+begin_src emacs-lisp
  (use-package multi-term
    :ensure t
    :bind (("C-x M" . multi-term)
	   ("C-x m" . switch-to-term-mode-buffer))
    :config
    (add-hook 'term-mode-hook
	      (lambda ()
		(dolist
		    (bind '(("<S-down>" . multi-term)
			    ("<S-left>" . multi-term-prev)
			    ("<S-right>" . multi-term-next)
			    ("C-<backspace>" . term-send-backward-kill-word)
			    ("C-<delete>" . term-send-forward-kill-word)
			    ("C-<left>" . term-send-backward-word)
			    ("C-<right>" . term-send-forward-word)
			    ("C-c C-j" . term-line-mode)
			    ("C-c C-k" . term-char-mode)
			    ("C-v" . scroll-up)
			    ("C-y" . term-paste)
			    ("C-z" . term-stop-subjob)
			    ("M-DEL" . term-send-backward-kill-word)
			    ("M-d" . term-send-forward-kill-word)))
		  (add-to-list 'term-bind-key-alist bind)))))
#+end_src

* erc IRC clients

#+begin_src emacs-lisp
  (setq erc-server "irc.libera.chat"
	erc-nick "andy---"
	erc-track-shorten-start 8
	erc-autojoin-channels-alist '(("irc.libera.chat" "#systemcrafters" "#emacs"))
	erc-kill-buffer-on-part t
	erc-auto-query 'bury)
#+end_src

* Macros

** insert python docstring

#+begin_src emacs-lisp
  (fset 'insert-py-docstring
     (kmacro-lambda-form [?\' ?\' ?\' return return tab ?A ?r ?g ?u ?m ?e ?n ?t ?s ?: return tab ?\C-u ?1 ?3 ?- return return tab ?R ?e ?t ?u ?r ?n ?s ?: return tab ?\C-u ?1 ?3 ?- return return tab ?\' ?\' ?\' return ?\C-p ?\C-p ?\C-p ?\C-p ?\C-p ?\C-p ?\C-p ?\C-p tab] 0 "%d"))
  (global-set-key (kbd "C-c (") 'insert-py-docstring)
#+end_src

* Choose correct mode

#+begin_src emacs-lisp
  (append (list '("\\.c$" . c-mode)
		'("\\.tex$" . latex-mode)
		'("\\.S$" . S-mode)
		'("\\.s$" . S-mode)
		'("\\.R$" . R-mode)
		'("\\.r$" . R-mode)
		'("\\.html$" . html-mode)
		'("\\.emacs" . emacs-lisp-mode)
		)
	  auto-mode-alist)
#+end_src

* crux
see [[https://github.com/bbatsov/crux][github]]

#+begin_src emacs-lisp
  (use-package crux
    :ensure t
    :bind
    (("C-c x o" . crux-open-with)
     ("C-c x k" . crux-smart-kill-line)
     ("C-c x n" . crux-cleanup-buffer-or-region)
     ("C-c x t" . crux-transpose-windows)
     ("C-c x D" . crux-delete-file-and-buffer)
     ("C-c x r" . crux-rename-file-and-buffer)
     ("C-c x d" . crux-duplicate-and-comment-current-line-or-region)
     ("C-c x TAB" . crux-indent-rigidly-and-copy-to-clipboard)
     ("C-c x I" . cux-indent-defun)
     ("C-c x i" . crux-find-user-init-file)
     ("C-c x j" . crux-top-join-line)))

#+end_src
* Functions

** comint
#+begin_src emacs-lisp
  (eval-after-load "comint"
    '(progn
       (define-key comint-mode-map [up]
	 'comint-previous-matching-input-from-input)
       (define-key comint-mode-map [down]
	 'comint-next-matching-input-from-input)
       (setq comint-scroll-to-bottom-on-output 'others)
       (setq comint-scroll-show-maximum-output t)
       ;; somewhat extreme, almost disabling writing in *R*, *shell* buffers above promp
       (setq comint-scroll-to-bottom-on-input 'this)
       ))
#+end_src

** swap windows

#+begin_src emacs-lisp
  (defun a/swap-windows ()
    "Swap your windows."
    (interactive)
    (cond ((not (> (count-windows)1))
	   (message "You can't rotate a single window!"))
	  (t
	   (setq i 1)
	   (setq numWindows (count-windows))
	   (while (< i numWindows)
	     (let* ((w1 (elt (window-list) i))
		    (w2 (elt (window-list) (+ (% i numWindows) 1)))
		    (b1 (window-buffer w1))
		    (b2 (window-buffer w2))
		    (s1 (window-start w1))
		    (s2 (window-start w2)))
	       (set-window-buffer w1 b2)
	       (set-window-buffer w2 b1)
	       (set-window-start w1 s2)
	       (set-window-start w2 s1)
	       (setq i (1+ i)))))))
#+end_src

** rotate windows

#+begin_src emacs-lisp
  (defun a/rotate-windows ()
    "Rotate your windows."
    (interactive)
    (if (= (count-windows) 2)
	(let* ((this-win-buffer (window-buffer))
	       (next-win-buffer (window-buffer (next-window)))
	       (this-win-edges (window-edges (selected-window)))
	       (next-win-edges (window-edges (next-window)))
	       (this-win-2nd (not (and (<= (car this-win-edges)
					   (car next-win-edges))
				       (<= (cadr this-win-edges)
					   (cadr next-win-edges)))))
	       (splitter
		(if (= (car this-win-edges)
		       (car (window-edges (next-window))))
		    'split-window-horizontally
		  'split-window-vertically)))
	  (delete-other-windows)
	  (let ((first-win (selected-window)))
	    (funcall splitter)
	    (if this-win-2nd (other-window 1))
	    (set-window-buffer (selected-window) this-win-buffer)
	    (set-window-buffer (next-window) next-win-buffer)
	    (select-window first-win)
	    (if this-win-2nd (other-window 1))))))
#+end_src

** functions for term-mode

#+begin_src emacs-lisp
  (defun last-term-mode-buffer (list-of-buffers)
    "Returns the most recently used term-mode buffer."
    (when list-of-buffers
      (if (eq 'term-mode (with-current-buffer (car list-of-buffers) major-mode))
	  (car list-of-buffers) (last-term-mode-buffer (cdr list-of-buffers)))))

  ;;Switch to the most recently used term-mode buffer, or create a new one.
  (defun switch-to-term-mode-buffer ()
    "Switch to the most recently used term-mode buffer, or create a
  new one."
    (interactive)
    (let ((buffer (last-term-mode-buffer (buffer-list))))
      (if (not buffer)
	  (multi-term)
	(switch-to-buffer buffer))))
#+end_src

** laoding file

#+begin_src emacs-lisp
  (defun load-if-exists (file)
    "Load `file` if it exists."
    (when (file-exists-p file)
      (load file)))
#+end_src

* global keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c r") 'a/rotate-windows)
  (global-set-key (kbd "C-c s") 'a/swap-windows)
#+end_src
